#pragma once
#include "../core/mstl_common"
#include "../containers/mstl_deque"
#include "../containers/mstl_vector"


NAMESPACE_MSTL

/* stack不需要push_front，所以这里直接将deque中的块起始下标从0开始 */
/* stack采用deque的优势:避开了重新分配内存时，要移动全部元素(理论上性能完全优于vector) */

template<typename T, typename Container = mstl::deque<T, mstl::Allocator<T>, 512, 0>>
class stack{
    using this_stack_type = stack<T, Container>;
public:
    using value_type       =  T;
    using reference        =  T&;
    using const_reference  =  const T&;
    using size_type        =  typename container_type::size_type;

    /* 默认构造函数 */
    stack() = default;

    /* 拷贝构造函数 */
    stack(const this_stack_type& other): cotainer_(other.container_) {}

    /* 移动构造函数 */
    stack (this_stack_type&& other) noexcept : container_(mstl::move(other.container_)) {}

    /* 初始化列表构造函数 */
    stack(const std::initializer_list<T>& init) {
        for (const auto& value : init) {
            container_.push_back(value);
        }
    }

    /* 析构函数 */
    ~stack() = default;

    /* push元素到栈顶 */
    template<typename U, typename = std::enable_if_t<std::is_same_v<std::remove_reference_t<U>, T>>>
    void push(U&& value) {
        container_.push_back(mstl::forward<U>(value));
    }

    /* 弹出栈顶元素 */
    void pop(){
        container_.pop_back();
    }

    /* 返回栈顶元素 */
    reference top() { return container_.back(); }
    const_reference top() const { return container_.back(); }

    /* =拷贝赋值 */    
    this_stack_type& operator =(const this_stack_type& other) {
        if (this != &other) {
            container_ = other.container_;
        }
        return *this;
    }

    /* =移动赋值 */
    this_stack_type& operator =(this_stack_type&& other) noexcept {
        if (this != &other) {
            container_ = mstl::move(other.container_);
        }
        return *this;
    }

    /* 基本函数 */
    size_type size() const { return container_.size(); }
    bool empty() const { return container_.empty(); }
    size_type capacity() const { return container_.capacity(); }

    /* 友元函数声明 */
    template<typename U>
    friend bool operator ==(const mstl::stack<U>& lhs, const mstl::stack<U>& rhs);
    template<typename U>
    friend bool operator !=(const mstl::stack<U>& lhs, const mstl::stack<U>& rhs);

private:
    Container container_;
};

/* 友元比较函数定义 */
template<typename U>
inline bool operator ==(const mstl::stack<U>& lhs, const mstl::stack<U>& rhs) {
    return lhs.container_ == rhs.container_;
}
template<typename U>
inline bool operator !=(const mstl::stack<U>& lhs, const mstl::stack<U>& rhs) {
    return !(lhs == rhs);
}

END_NAMESPACE