#include "../core/mstl_common"
#include "../containers/mstl_deque"
#include "../containers/mstl_vector"


NAMESPACE_MSTL

/* TODO: */
template<typename T>
class queue{
    using container_type = mstl::deque<T, mstl::Allocator<T>>;
    using this_queue_type = queue<T>;
public:
    using value_type = T;
    using reference = T&;
    using const_reference = const T&;
    using size_type = typename container_type::size_type;

    queue() = default;

    queue(const this_queue_type& other) = default;
    
    queue (this_queue_type&& other) : container_(mstl::move(other.container_)) {}

    queue(const std::initializer_list<T>& init) {
        for (const auto& value : init) {
            container_.push_back(value);
        }
    }

    ~queue() = default;

    template<typename U, typename = std::enable_if_t<std::is_same_v<std::remove_reference_t<U>, T>>>
    void push(U&& value) {
        container_.push_back(mstl::forward<U>(value));
    }

    void pop(){
        container_.pop_front();
    }

    reference front() { return container_.front(); }
    const_reference front() const { return container_.front(); }

    this_queue_type& operator =(const this_queue_type& other) {
        if (this != &other) {
            container_ = other.container_;
        }
        return *this;
    }

    this_queue_type& operator =(this_queue_type&& other) noexcept {
        if (this != &other) {
            container_ = mstl::move(other.container_);
        }
        return *this;
    }
    
    size_type size() const { return container_.size(); }
    size_type capacity() const { return container_.capacity(); }
    bool empty() const { return container_.empty(); }

    template<typename U>
    friend bool operator ==(const mstl::queue<U>& lhs, const mstl::queue<U>& rhs);

    template<typename U>
    friend bool operator !=(const mstl::queue<U>& lhs, const mstl::queue<U>& rhs);

private:
    container_type container_;


};


template<typename U>
bool operator ==(const mstl::queue<U>& lhs, const mstl::queue<U>& rhs) {
    return lhs.container_ == rhs.container_;
}

template<typename U>
bool operator !=(const mstl::queue<U>& lhs, const mstl::queue<U>& rhs) {
    return !(lhs == rhs);
}

END_NAMESPACE