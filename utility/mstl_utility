#pragma once
#include <type_traits>

namespace mstl{


/******************************迭代器层次关系定义******************************/
struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};
/******************************迭代器层次关系定义******************************/




/******************************迭代器小工具******************************/
/* next iterator，限定单双向迭代器+随机访问迭代器才能用 */
template <typename Iterator, typename = std::enable_if_t<std::is_base_of_v<mstl::forward_iterator_tag, typename Iterator::iterator_category>>>
inline Iterator next(Iterator iter) {
    return (++iter);
}

/* previous iterator， 限定双向迭代器+随机访问迭代器才能用 */
template <typename Iterator, typename = std::enable_if_t<std::is_base_of_v<mstl::bidirectional_iterator_tag,  typename Iterator::iterator_category>>>
inline Iterator prev(Iterator iter) {
    return (--iter);
}
/******************************迭代器小工具******************************/





/******************************默认比较对象******************************/
/* 小的元素在左边 */
template<typename T>
struct less{
    bool operator() (const T& lhs, const T& rhs) const{
        return lhs < rhs;
    }
};

/* 大的元素在左边 */
template<typename T>
struct greater{
    bool operator() (const T& lhs, const T& rhs) {
        return lhs > rhs;
    }
};
/******************************默认比较对象******************************/





/******************************移动语义&完美转发******************************/
/* 移动语义 */
template <typename T>
inline typename std::remove_reference<T>::type&& move(T&& arg) noexcept {
    return static_cast<typename std::remove_reference<T>::type&&>(arg);
}

/* 转发左值 */
template<typename T>
inline T&& forward(typename std::remove_reference<T>::type& arg) noexcept {
    return static_cast<T&&> (arg);
}

/* 转发右值 */
template <typename T>
inline T&& forward(typename std::remove_reference<T>::type&& arg) noexcept {
    return static_cast<T&&>(arg);
}
/******************************移动语义&完美转发******************************/





/******************************swap数据交换******************************/
/* swap value */
template <typename T>
inline void swap(T& lhs, T& rhs) noexcept {
    T temp = mstl::move(lhs);
    lhs = mstl::move(rhs);
    rhs = mstl::move(temp);
}

/* swap iter data */
template<typename Iterator>
inline void iter_swap(Iterator& lhs, Iterator& rhs) noexcept {
    swap(*lhs, *rhs);
}
/******************************swap数据交换******************************/


/* log2 */
template<typename T>
inline mstl::size_t log2(T x) {
    static_assert(std::is_integral<T>::value, "T must be an integral type");
    mstl::size_t res = 0;
    while (x >>= 1) {
        res ++;
    }
    return res;
}


}/* end namespace mstl*/